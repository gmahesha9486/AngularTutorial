ng serve
ng serve --port 4201


How to check the angular version
ng --version


npm --version

------------------------------------------

Create a simple angular project
sudo npm install -g @angular/cli

ng new my-first-app

Run the application
Go the project folder.

ng serve
OR
ng serve --port 4201

-----------------------

package.json file
It mention about dependencies.

app component : present in src folder.
app.component.html : This is rendered to web browser.
app.component.ts: this will be converted to normal JS

---------
check index.html file. IT has reference to :   <app-root></app-root>
app-root is mentioned in : app.component.ts

-----------------
Data binding
To use data binding, modify in : app.module.ts

import {FormsModule} from '@angular/forms';  // This is a typescript feature

imports: [
    BrowserModule,
    FormsModule
  ],  // This is a feature understood by Angular.

---------------------

Adding Bootstrap to project
my-first-app>npm install --save bootstrap@3
This command will install the bootstrap locally in this project. Not globally
stores boorstrap in node_modules folder.

Now Angular should be aware of this bootstrap. So, mention below details in angular.json file
under "architect": {        "build": {

 "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],

---------------------

Root application of our project is: app

--------------------------
main.ts

This is the first code, which gets executed.

-------------------------
Creation of new component
Create new component. then open the file: app.module.ts
mention the new component name here.

------------------------
decorator

import { NgModule } from '@angular/core';

---------------------------

Creation of new component using command
projectFolder>ng generate component compName
or use the command:  ng g c compName

-------------------

Data Binding

String interpolation: {{data}}

Property Binding : [property]="data"

Event Binding: (event)  = "expression"

Combination of Both: Two-way-Binding : [(ngModel)]="data"

-----------------------------

Method Declaration
check server.component.ts
getServerStatus(){
        return 199;
        //return this.serverStatus;
    }
Call the method from html file
test value is: {{getServerStatus() }}

--------------------------------

Two way data binding

<input type="text" class="form-control"
 [(ngModel)]="serverName">

----------
Reset User
<button
	class="btn btn-primary"
	[disabled]="username=== ''"
	(click)="username=''">Reset User</button>

----------------------

Directives

If directive
ngIf is a structural dirctive. So use *
It changes the structure of DOM

-------------------
For loop

Getting the index of for loop

<div *ngFor="let logItem of log; let i = index">


--------------

Create new project

ng new ng4-complete-guide

install bootstrap

create component
projFolder>ng g c recipes --skipTests true

app/recipes
RecipesComponent

ng g c recipes/recipe-list --skipTests true
ng g c recipes/recipe-detail --skipTests true
ng g c recipes/recipe-detail --skipTests true

ng g c recipes/recipe-list/recipe-item --skipTests true
--------------
ng g c shopping-list --skipTests true
ng g c shopping-list/shopping-edit --skipTests true


----------------------------

Different way of creating member variables

export class Ingredient{
	constructor(public name: string, public amount: number){}
}

---------------------------------

Module Introduction


-------------------

When someone gives src folder, without node_modules, do these things
Run "npm install" inside this project folder to install all dependencies.

------------------------

Add this line in : tsconfig.json file. otherwise, you have to initialize the member variable of a class.
"strictPropertyInitialization": false

---------------------------

  <router-outlet></router-outlet>  <!-- Angular provided directive to update our template to 
    dynamically load component based on url path -->

--------------------------------

routerLink

------------------

sample class

export class Employee {
    id: number;
    firstName: string;
    lastName: string;
    emailId: string;
 
    constructor(id?: number, firstName?: string, lastName?: string, emailId?: string) {
       
    }
    

    /*
    constructor(id?: number, firstName?: string, lastName?: string, emailId?: string) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.emailId = emailId;
    }  */  
}

==========================================






